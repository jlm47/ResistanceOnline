@model ResistanceOnline.Site.Models.GameModel
@{

	ViewBag.Title = "Game " + Model.GameId;
}
@if (Model.PlayerGuid.HasValue)
{
    <p class="bookmark-instructions">Hello @Model.PlayerName, don't forget to bookmark this URL!</p>
}
<h3>Game setup</h3>
<p>
    This is a @Model.GameSize.ToWords() player game with the following characters
    @if (Model.CharactersMissing > 0)
    {
    <span class="important">(@Model.CharactersMissing still to be added)</span>
    }        
</p>
<ul class="cards">
	@foreach (var c in Model.CharactersInGame)
	{
		<li><img class="card" src="/Images/@(c).png" alt="@c.Humanize()" title="@c.Humanize()" /></li>
	}
</ul>
@if (Model.Actions.Contains(ResistanceOnline.Core.Action.Type.AddCharacter))
{
    <form role="form" action="/AddCharacter" method="post">
        <input type="hidden" name="gameid" value="@Model.GameId" />
        <input type="hidden" name="playerGuid" value="@Model.PlayerGuid" />
        <div class="form-group">
            @Html.DropDownList("Character", Model.AllCharactersSelectList, new { @class = "form-control" })
        </div>
        <input class="btn btn-default" type="submit" value="Add Character" />
    </form>
}


<div class="clear"></div>

@if (Model.PlayerInfo.Count > 0) { 
<h3>Oracle</h3>
<p>Mouse over each player card to see what information you know about them.</p>    
<ul class="cards">
	@foreach (var p in Model.PlayerInfo)
	{
		<li>
			<img class="playercard" src="/Images/player.png" data-actual="/images/@(p.Actual).png" title="@(p.Actual == "Player" ? "" : p.Actual.Humanize())" />
            <div class="playername">
                @if (Model.ImpersonationList != null && Model.ImpersonationList.Count > 0)
                {
                    @Html.ActionLink(p.Name, "Game", new { gameId = Model.GameId, playerGuid = Model.ImpersonationList.First(i => i.Name == p.Name).Guid })
                }
                else
                {
                    @p.Name
                }
            </div>
		</li>
	}
</ul>

@section scripts {
<script>
    $(function () {
        //show extra info on mouse over
	    $(".playercard").hover(function () {
	        $(this).attr('src', $(this).attr('data-actual'));
	    }, function () {
	        $(this).attr('src', '/images/player.png');
	    });
        //show extra info on click for touchscreen devices
	    $(".playercard").click(function () {
	        $(this).unbind("mouseenter mouseleave");
	        if ($(this).attr('src') == $(this).attr('data-actual')) {
	            $(this).attr('src', '/images/player.png');
	        } else {
	            $(this).attr('src', $(this).attr('data-actual'));
	        }
	    });
	});
</script>
}
}

<div class="clear"></div>

@foreach (var round in Model.Rounds)
{
	<h3>Round @((Model.Rounds.IndexOf(round)+1).ToWords())</h3>
    <p>Team size of @round.TeamSize.ToWords() players (@round.FailsRequired.ToWords() fail@(round.FailsRequired == 2 ? "s" : "") required)</p>
	foreach (var team in round.Teams)
	{
		<div class="quest">
			<div class="setup">
				<img src="/Images/leadertoken.png" />
				<span class="leader">@team.Leader</span>
				@if (team.TeamMembers.Count > 0)
				{
				<img src="/Images/teamtoken.png" />
				<span class="team">@String.Join(",", team.TeamMembers)</span>                    
				}
                @if (Model.Waiting.Where(w => w.Action == ResistanceOnline.Core.Action.Type.AddToTeam).Any())
                {
                    <span class="waiting">Waiting for @String.Join(",", Model.Waiting.Where(w => w.Action == ResistanceOnline.Core.Action.Type.AddToTeam).Select(w => w.Name)) to choose the team</span>
                }
                
				@foreach (var vote in team.Vote)
				{
					<img class="vote" src="/images/@(vote.Image).png" title="@vote.Player" />
				}
                
                @if (Model.Waiting.Where(w => w.Action == ResistanceOnline.Core.Action.Type.VoteForTeam).Any())
                {
                    <span class="waiting">Waiting for @String.Join(",", Model.Waiting.Where(w => w.Action == ResistanceOnline.Core.Action.Type.VoteForTeam).Select(w=>w.Name)) to vote</span>
                }
			</div>
            <div class="results">
                @foreach (var card in team.QuestCards)
                {
                    <img class="card" src="/images/@(card.Image).png" />
                }
                @if (Model.Waiting.Where(w => w.Action == ResistanceOnline.Core.Action.Type.SubmitQuestCard).Any())
                {
                    <span class="waiting">Waiting for @String.Join(",", Model.Waiting.Where(w => w.Action == ResistanceOnline.Core.Action.Type.SubmitQuestCard).Select(w => w.Name)) to quest</span>
                }
            </div>
		</div>
	}
}

@if (Model.Actions.Count>0) { 
	if (Model.Actions.Contains(ResistanceOnline.Core.Action.Type.GuessMerlin))
	{
		<form role="form" action="/GuessMerlin" method="post">
			<input type="hidden" name="gameid" value="@Model.GameId" />
			<input type="hidden" name="playerGuid" value="@Model.PlayerGuid" />
			<div class="form-group">
				@Html.DropDownList("Guess", Model.GuessMerlinPlayersSelectList, new { @class = "form-control" })
			</div>
			<input class="btn btn-default" type="submit" value="Guess Merlin" />
		</form>
	}
	if (Model.Actions.Contains(ResistanceOnline.Core.Action.Type.JoinGame))
	{
		<form role="form" action="/JoinGame" method="post">
			<input type="hidden" name="gameid" value="@Model.GameId" />
			<div class="form-group">
                <input class="form-control" type="text" name="name" placeholder="Enter your name" />
			</div>
			<input class="btn btn-default" type="submit" value="Join Game" />
		</form>
    }
    if (Model.Actions.Contains(ResistanceOnline.Core.Action.Type.AddToTeam))
    {
        <form role="form" action="/AddToTeam" method="post">
            <input type="hidden" name="playerGuid" value="@Model.PlayerGuid" />
            <input type="hidden" name="gameId" value="@Model.GameId" />
            <div class="form-group">
                @Html.DropDownList("Person", Model.AddToTeamPlayersSelectList, new { @class = "form-control" })
            </div>
            <input class="btn btn-default" type="submit" value="Add to Team" />
        </form>
    }
    if (Model.Actions.Contains(ResistanceOnline.Core.Action.Type.SubmitQuestCard))
    {
		<form role="form" action="/SubmitQuestCard" method="post">
			<input type="hidden" name="playerGuid" value="@Model.PlayerGuid" />
			<input type="hidden" name="gameid" value="@Model.GameId" />
			<div class="radio">
				<label>
					<input type="radio" name="success" value="true" />Success
				</label>
			</div>
			<div class="radio">
				<label>
					<input type="radio" name="success" value="false" />Fail
				</label>
			</div>
			<input class="btn btn-default" type="submit" value="Submit Quest Card" />
		</form>
    }
    if (Model.Actions.Contains(ResistanceOnline.Core.Action.Type.VoteForTeam))
    {
        <form role="form" action="/VoteForTeam" method="post">
            <input type="hidden" name="playerGuid" value="@Model.PlayerGuid" />
            <input type="hidden" name="gameid" value="@Model.GameId" />
            <div class="radio">
                <label>
                    <input type="radio" name="approve" value="true" />Accept
                </label>
            </div>
            <div class="radio">
                <label>
                    <input type="radio" name="approve" value="false" />Reject
                </label>
            </div>
            <input class="btn btn-default" type="submit" value="Vote for Team" />
        </form>
    }
}